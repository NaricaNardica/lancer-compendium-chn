{
  "label": "lancer.compendium.core_macros",
  "folders": {
    "AoE Templates": "AoE Templates",
    "Core": "Core"
  },
  "entries": {
    "Blast 1": {
      "name": "Blast 1",
      "command": "game.lancer.canvas.WeaponRangeTemplate.fromRange({\n    type: \"Blast\",\n    val: 1,\n}).placeTemplate()\n    .then(t => {\n        if (t) game.lancer.targetsFromTemplate(t.id);\n    }\n);"
    },
    "Blast 2": {
      "name": "Blast 2",
      "command": "game.lancer.canvas.WeaponRangeTemplate.fromRange({\n    type: \"Blast\",\n    val: 2,\n}).placeTemplate()\n    .then(t => {\n        if (t) game.lancer.targetsFromTemplate(t.id);\n    }\n);"
    },
    "Blast 3": {
      "name": "Blast 3",
      "command": "game.lancer.canvas.WeaponRangeTemplate.fromRange({\n    type: \"Blast\",\n    val: 3,\n}).placeTemplate()\n    .then(t => {\n        if (t) game.lancer.targetsFromTemplate(t.id);\n    }\n);"
    },
    "Burst 1": {
      "name": "Burst 1",
      "command": "game.lancer.canvas.WeaponRangeTemplate.fromRange({\n    type: \"Burst\",\n    val: 1,\n}).placeTemplate()\n    .then(t => {\n        if (t) game.lancer.targetsFromTemplate(t.id);\n    }\n);"
    },
    "Burst 2": {
      "name": "Burst 2",
      "command": "game.lancer.canvas.WeaponRangeTemplate.fromRange({\n    type: \"Burst\",\n    val: 2,\n}).placeTemplate()\n    .then(t => {\n        if (t) game.lancer.targetsFromTemplate(t.id);\n    }\n);"
    },
    "Burst 3": {
      "name": "Burst 3",
      "command": "game.lancer.canvas.WeaponRangeTemplate.fromRange({\n    type: \"Burst\",\n    val: 3,\n}).placeTemplate()\n    .then(t => {\n        if (t) game.lancer.targetsFromTemplate(t.id);\n    }\n);"
    },
    "Burst 5": {
      "name": "Burst 5",
      "command": "game.lancer.canvas.WeaponRangeTemplate.fromRange({\n    type: \"Burst\",\n    val: 5,\n}).placeTemplate()\n    .then(t => {\n        if (t) game.lancer.targetsFromTemplate(t.id);\n    }\n);"
    },
    "Cone 3": {
      "name": "Cone 3",
      "command": "game.lancer.canvas.WeaponRangeTemplate.fromRange({\n    type: \"Cone\",\n    val: 3,\n}).placeTemplate()\n    .then(t => {\n        if (t) game.lancer.targetsFromTemplate(t.id);\n    }\n);"
    },
    "Cone 5": {
      "name": "Cone 5",
      "command": "game.lancer.canvas.WeaponRangeTemplate.fromRange({\n    type: \"Cone\",\n    val: 5,\n}).placeTemplate()\n    .then(t => {\n        if (t) game.lancer.targetsFromTemplate(t.id);\n    }\n);"
    },
    "Cone 7": {
      "name": "Cone 7",
      "command": "game.lancer.canvas.WeaponRangeTemplate.fromRange({\n    type: \"Cone\",\n    val: 7,\n}).placeTemplate()\n    .then(t => {\n        if (t) game.lancer.targetsFromTemplate(t.id);\n    }\n);"
    },
    "Custom Paint Job": {
      "name": "Custom Paint Job",
      "command": "// This macro is designed to be used with Triggler from Combat Utility Belt. // Otherwise, it can be used as an alternative to manually using the Structure macro. // It also includes \"destroying\" the Custom Paint Job system in order to check if // it's been used between full repairs.\nlet cpjActor = game.actors.get(canvas.tokens.controlled[0].actor.id); //console.log(cpjActor);\nasync function scratchedThePaint(cpjId) {\n    await cpjActor.update({\"system.hp.value\": 1});\n    await cpjActor.updateEmbeddedDocuments(\"Item\", [{_id: cpjId, 'system.destroyed': true}])\n    return \"Done.\";\n};\nif (canvas.tokens.controlled.length !== 1) {\n    ui.notifications.error(\"Select one and only one token\");\n    return;\n}\nlet cpj = cpjActor.items.find(\n    i => i.system.lid === \"ms_custom_paint_job\"\n); if (cpj) {\n  if (!cpj.system.destroyed) {\n      console.log(\"Custom Paint Job found.\");\n      let roll = new Roll('1d6');\n      await roll.roll();\n    const html = await renderTemplate(\n      `systems/${game.system.id}/templates/chat/generic-card.hbs`,\n    {\n      title: \"CUSTOM PAINT JOB\",\n      description: \"\",\n      roll,\n      roll_tt: await roll.getTooltip(),\n    });\n    const chatData = {\n      type: CONST.CHAT_MESSAGE_TYPES.ROLL,\n      roll: roll,\n      speaker: {\n      actor: cpjActor,\n      token: cpjActor?.token,\n      alias: !!cpjActor?.token ? cpjActor.token.name : null,\n      },\n      content: html,\n    }\n    await ChatMessage.create(chatData);\n    console.log(`CPJ rolled ${roll.total}`);\n    if (roll.total === 6) {\n      await scratchedThePaint(cpj._id)\n    } else {\n      await cpjActor.beginStructureFlow();\n    }\n    return;\n  } else {\n    console.log(\"Custom Paint Job has already been used.\");\n  }\n} // If we reach here, either the actor doesn't have CPJ or it's already been used. canvas.tokens.controlled[0].actor.beginStructureFlow();"
    },
    "Dismount/Eject": {
      "name": "Dismount/Eject",
      "command": "if (!actor?.is_mech()) return;\nconst pilot = await fromUuid(actor.system.pilot?.id);\nif (!pilot) return;\n\ngame.lancer.canvas.WeaponRangeTemplate.fromRange({\n    type: \"Blast\",\n    val: 0.1,\n})\n    .placeTemplate()\n    .then(async t => {\n        if (!t) return;\n        const [x, y] = canvas.grid.getTopLeft(t.x, t.y);\n        await TokenDocument.create(\n            { ...pilot.prototypeToken, actorId: pilot.id, x, y },\n            { parent: canvas.scene }\n        );\n        await t.delete();\n    });"
    },
    "Full Repair": {
      "name": "Full Repair",
      "command": "if (canvas.tokens.controlled.length !== 1) {\n  ui.notifications.error(\"Select one and only one token\");\n  return;\n}\ncanvas.tokens.controlled[0].actor.beginFullRepairFlow();"
    },
    "Line 10": {
      "name": "Line 10",
      "command": "game.lancer.canvas.WeaponRangeTemplate.fromRange({\n    type: \"Line\",\n    val: 10,\n}).placeTemplate()\n    .then(t => {\n        if (t) game.lancer.targetsFromTemplate(t.id);\n    }\n);"
    },
    "Line 20": {
      "name": "Line 20",
      "command": "game.lancer.canvas.WeaponRangeTemplate.fromRange({\n    type: \"Line\",\n    val: 20,\n}).placeTemplate()\n    .then(t => {\n        if (t) game.lancer.targetsFromTemplate(t.id);\n    }\n);"
    },
    "Line 3": {
      "name": "Line 3",
      "command": "game.lancer.canvas.WeaponRangeTemplate.fromRange({\n    type: \"Line\",\n    val: 3,\n}).placeTemplate()\n    .then(t => {\n        if (t) game.lancer.targetsFromTemplate(t.id);\n    }\n);"
    },
    "Line 5": {
      "name": "Line 5",
      "command": "game.lancer.canvas.WeaponRangeTemplate.fromRange({\n    type: \"Line\",\n    val: 5,\n}).placeTemplate()\n    .then(t => {\n        if (t) game.lancer.targetsFromTemplate(t.id);\n    }\n);"
    },
    "Line 8": {
      "name": "Line 8",
      "command": "game.lancer.canvas.WeaponRangeTemplate.fromRange({\n    type: \"Line\",\n    val: 8,\n}).placeTemplate()\n    .then(t => {\n        if (t) game.lancer.targetsFromTemplate(t.id);\n    }\n);"
    },
    "Mimic Gun": {
      "name": "Mimic Gun",
      "command": "// Calculate a Range for the Mimic Gun.\nasync function getRange() {\n  const roll = await new Roll(\"d20\").roll({ async: true });\n  const text =\n  `<i class=\"cci cci-range i--m\"></i> ${roll.total}` +\n  `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;` +\n  `${Math.ceil(roll.total / 2) + 1} ` +\n  `<i class=\"cci cci-kinetic i--m damage--kinetic\"></i>`;\n  return text;\n}\n\n// Construct HTML message table for chat message.\nasync function buildMessageTable() {\n  const messageTable =  \n    \"<b><h2>Mimic Gun Ranges</h2></b>\" + \n    \"<p><b>Range 1: </b>\" + await getRange() +\n    \"<hr><p><b>Range 2: </b>\" + await getRange() +\n    \"<hr><p><b>Range 3: </b>\" + await getRange()\n  return messageTable;\n}\n\n// Construct the chat message.\nasync function buildChatData() {\n  return {\n    user: game.user.id,\n    speaker: ChatMessage.getSpeaker(),\n    content: await buildMessageTable()\n  };\n}\n\nChatMessage.create(await buildChatData(), {});"
    },
    "Overheat Token": {
      "name": "Overheat Token",
      "command": "if (canvas.tokens.controlled.length !== 1) {\n  ui.notifications.error(\"Select one and only one token\");\n  return;\n}\ncanvas.tokens.controlled[0].actor.beginOverheatFlow();"
    },
    "Ruin Tokens": {
      "name": "Ruin Tokens",
      "command": "function isBiological(token) {\n  let actorItems = game.actors.filter(x => x.id === token.document.actorId)[0].items;\n  for (let item of actorItems.entries()) {\n    if (item[1].type === \"npc_class\" && item[1].system.role === \"biological\") {\n      console.log(`${token.name} is biological.`);\n      return true;\n    } else {\n      console.log(`${token.name} is not biological.`);\n      return false;\n    }\n  }\n}\n\nif (canvas.tokens.controlled.length === 0) {\n  ui.notifications.error(\"Please select one or more tokens.\");\n  return;\n}\ncanvas.tokens.controlled.forEach(async t => {\n  if (isBiological(t)) {\n    ui.notifications.info(`${t.name} is biological. Skipping.`);\n    return;\n  }\n  // CONFIG BELOW:\n  // Data path where your images are stored.\n  let IMAGE_PATH = \"lancer-wrecks\";\n\n  // Dictionary for mapping sizes to subdirectories under IMAGE_PATH.\n  // Keys are the potential sizes a LancerActor may have; values are the subdirectory names.\n  // Store your images by size in each subdirectory.\n  let SIZE_PATHS = {\n    0.5: \"S-HALF\",\n    1: \"S1\",\n    2: \"S2\",\n    3: \"S3\",\n    4: \"S4\",\n  };\n\n  // Script:\n  let size = t.actor.system.size;\n  let sizePath = SIZE_PATHS[size];\n  var imgString;\n  if (!!sizePath) {\n    var wreckFileList;\n    try {\n      let wreckFilePicker = await FilePicker.browse(\"data\", `/${IMAGE_PATH}/${sizePath}`);\n      wreckFileList = wreckFilePicker.files;\n      console.log(wreckFileList);\n      let numImages = wreckFileList.length;\n      // Get random number between 1 and N, where n is number of images stored for mech size.\n      let rand = Math.floor(Math.random() * numImages);\n      imgString = wreckFileList[rand];\n    } catch (error) {\n      ui.notifications.warn(`${error}. Skipping image replacement.`);\n    }\n  } else {\n    ui.notifications.warn(\n      `Missing size path configuration for Size ${size} for ${t.name}. Skipping image replacement.`\n    );\n  }\n\n  console.log(`Picked ${imgString} for ${t.name}`);\n\n  let data = [\n    {\n      _id: t.id,\n      \"texture.src\": imgString,\n    },\n  ];\n\n  canvas.scene.updateEmbeddedDocuments(\"Token\", data);\n  t.actor.update({ \"system.hp\": size * 10, \"system.heat\": 0, \"system.burn\": 0 });\n  game.combat.getCombatantByToken(t.id)?.delete();\n  // t.update(data);\n  // t.refresh();\n});"
    },
    "Scan": {
      "name": "Scan",
      "command": "let targets = Array.from(game.user.targets);\n\n//actorPermissionLevel - This sets the permission level for the parent actor of a token (from CONST.DOCUMENT_PERMISSION_LEVELS, use NONE, LIMITED, OBSERVER, or OWNER). If set to `null`, no change is made.\nconst actorPermissionLevel = null;\n\nfunction sort_features(a, b) {\n  return b.system.origin.base - a.system.origin.base;\n}\n\nfunction construct_features(items, origin) {\n  let sc_list = ``;\n  sc_list += `<p>${origin}</p>`;\n  let sc_features = items.filter(f => f.system.origin.name === origin).sort(sort_features);\n  sc_features.forEach(i => {\n    let sc_name = ``;\n    let sc_desc = ``;\n    if (i.system.origin.name === \"EXOTIC\" && !i.system.origin.base) {\n      sc_name = '<code class=\"horus--subtle\">UNKNOWN EXOTIC SYSTEM</code>';\n      sc_desc = \"???\";\n    } else {\n      sc_name = i.name;\n      if (i.system.effect) {\n        sc_desc = i.system.effect;\n      } else {\n        sc_desc = \"No description given.\";\n      }\n      if (i.system.trigger) {\n        sc_desc = `Trigger:${i.system.trigger}<br>${sc_desc}`;\n      }\n    }\n    let sc_entry = `<details><summary>${sc_name}</summary><p>${sc_desc}</p></details>`;\n    sc_list += sc_entry;\n  });\n  return sc_list;\n}\n\nfunction construct_templates(items) {\n  let sc_templates = ``;\n  if (!items || items.length == 0) {\n    sc_templates += \"<p>NONE</p>\";\n  } else {\n    items.forEach(i => {\n      sc_templates += `<p>${i.name}</p>`;\n    });\n  }\n\n  sc_templates += \"<br>\";\n  return sc_templates;\n}\n\ntargets.forEach(target => {\n  let actor = target.actor;\n  if (actorPermissionLevel !== null) {\n    const actorId = actor.system.parent._id;\n    const parentActor = game.actors.get(actorId);\n    parentActor.update({ ownership: { default: actorPermissionLevel } });\n  }\n  let items = actor.items;\n  let hase_table_html = `\n<table>\n  <tr>\n    <th>HULL</th><th>AGI</th><th>SYS</th><th>ENG</th>\n  </tr>\n  <tr>\n    <td>${actor.system.hull || 0}</td>\n    <td>${actor.system.agi || 0}</td>\n    <td>${actor.system.sys || 0}</td>\n    <td>${actor.system.eng || 0}</td>\n  </tr>\n</table>`;\n  let stat_table_html = `\n<table>\n  <tr>\n    <th>Armor</th><th>HP</th><th>Heat</th><th>Speed</th>\n  </tr>\n  <tr>\n    <td>${actor.system.armor}</td>\n    <td>${actor.system.hp.value}/${actor.system.hp.max}</td>\n    <td>${actor.system.heat.value || 0}/${actor.system.heat.max || 0}</td>\n    <td>${actor.system.speed}</td>\n  </tr>\n  <tr>\n    <th>Evasion</th><th>E-Def</th><th>Save</th><th>Sensors</th>\n  </tr>\n  <tr>\n    <td>${actor.system.evasion}</td>\n    <td>${actor.system.edef}</td>\n    <td>${actor.system.save}</td>\n    <td>${actor.system.sensor_range}</td>\n  </tr>\n  <tr>\n    <th>Size</th><th>Activ</th><th>Struct</th><th>Stress</th>\n  </tr>\n  <tr>\n    <td>${actor.system.size}</td>\n    <td>${actor.system.activations || 1}</td>\n    <td>${actor.system.structure.value || 0}/${actor.system.structure.max || 0}</td>\n    <td>${actor.system.stress.value || 0}/${actor.system.stress.max || 0}</td>\n  </tr>\n</table>`;\n  console.log(\"Scanning\", target);\n  const classes = items.filter(i => i.is_npc_class());\n  let sc_class = !classes || classes.length === 0 ? \"NONE\" : classes[0].name;\n  let sc_tier = actor.system.tier;\n  const templates = items.filter(i => i.is_npc_template());\n  let sc_templates = construct_templates(templates);\n  let sc_list = ``;\n  const features = items.filter(i => i.is_npc_feature());\n  if (!features || features.length === 0) {\n    sc_list += \"<p>NONE</p>\";\n  } else {\n    let sc_origins = [];\n    features.forEach(f => {\n      let origin = f.system.origin.name;\n      if (!sc_origins.includes(origin)) {\n        sc_origins.push(origin);\n      }\n    });\n    sc_origins.forEach(origin => {\n      sc_list += construct_features(features, origin);\n    });\n  }\n\n  ChatMessage.create({\n    user: game.user._id,\n    content:\n      `<h2>Scan results: ${actor.name}</h2>` +\n      `<h3>Class: ${sc_class}, Tier ${sc_tier}</h3>` +\n      hase_table_html +\n      stat_table_html +\n      `<h3>Templates:</h3>` +\n      sc_templates +\n      `<h3>Systems:</h3>` +\n      sc_list,\n    \"flags.core.canPopout\": true,\n  });\n});"
    },
    "Scan (Journal)": {
      "name": "Scan (Journal)",
      "command": "//Sanity Check - Can this user even create folders and journal entries? Does the folder journal folder exist?\nif (JournalEntry.canUserCreate(game.user) == false) {\n  ui.notifications.error(\n    `${game.user.name} attempted to run SCAN to Journal but lacks proper permissions. Please correct and try again.`\n  );\n  return;\n}\n\n// ======================================================\n//Variables - Change these to control the macro\n// ======================================================\n\n// outputToChat - if set to true, also send the scan results to chat.\nconst outputToChat = false;\n//journalFolderName - The name, as displayed in foundry, of the folder you want the journal entries to save to. Remember to enclose in quotes: 'example'\nconst journalFolderName = \"SCAN Database\";\n//nameTemplate - The text before the scan number and target name. Remember to enclose in quotes: 'example'\nconst nameTemplate = \"SCAN: \";\n//numberLength - The total length of the scan number, extra spaces are filled with 0s. Setting this to 3, for example would produce scan number 001 on your first scan. Integers only and no quotes.\nconst numberLength = 3;\n//startingNumber - If you want the scan number to start at something other than 1 then change this. Integers only and no quotes.\nconst startingNumber = 1;\n//permissionLevel - This sets the default permission level of the scan entry (from CONST.DOCUMENT_OWNERSHIP_LEVELS, use NONE, LIMITED, OBSERVER, or OWNER).\nconst permissionLevel = CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n//updateExisting - This macro will check if a scan journal entry exists and update it, set this to false if you want it to create a new scan journal entry.\nconst updateExisting = true;\n//actorPermissionLevel - This sets the permission level for the parent actor of a token (from CONST.DOCUMENT_PERMISSION_LEVELS, use NONE, LIMITED, OBSERVER, or OWNER). If set to `null`, no change is made.\nconst actorPermissionLevel = null;\n//targets - Gets the data for your currently selected target(s) and stores it for later use. Do not change.\nlet targets = Array.from(game.user.targets);\n\n// ===========================================================\n// DO NOT MODIFY BELOW HERE UNLESS YOU KNOW WHAT YOU'RE DOING\n// ===========================================================\n\n// ======================================================\n//Functions\n// ======================================================\n\n//zeroPad - Adds a set number 0s to the fed number to produce a consistent length number.\nfunction zeroPad(num, places) {\n  return String(num).padStart(places, \"0\");\n}\n\n//findItemByType - To find specific items in the .item array.\nfunction findItemByType(array, itemType) {\n  return array.filter(item => item.type === itemType);\n}\n\n//sort_features - Sorts the feature list for the scanned target\nfunction sort_features(a, b) {\n  return b.system.origin.base - a.system.origin.base;\n}\n\n//construct_features - Builds out the list of selectable features for the scanned target, includes support for exotics.\nfunction construct_features(items, origin) {\n  let sc_list = ``;\n  sc_list += `<p>${origin}</p>`;\n  let sc_features = items.filter(f => f.system.origin && f.system.origin.name === origin).sort(sort_features);\n  sc_features.forEach(i => {\n    let sc_name = ``;\n    let sc_desc = ``;\n    if (i.system.origin.name == \"EXOTIC\" && !i.system.origin.base) {\n      sc_name = '<code class=\"horus--subtle\">UNKNOWN EXOTIC SYSTEM</code>';\n      sc_desc = \"???\";\n    } else {\n      sc_name = i.name;\n      if (i.system.effect) {\n        sc_desc = i.system.effect;\n      } else {\n        sc_desc = \"No description given.\";\n      }\n      if (i.system.trigger) {\n        sc_desc = `Trigger: ${i.system.trigger}<br>${sc_desc}`;\n      }\n    }\n    if (!sc_desc.startsWith(\"<p>\") && !sc_desc.startsWith(\"<P>\")) sc_desc = `<p>${sc_desc}</p>`;\n    let sc_entry = `<details><summary>${sc_name}</summary>${sc_desc}</details>`;\n    sc_list += sc_entry;\n  });\n  return sc_list;\n}\n\nfunction construct_weapons(items, origin, tier) {\n  let sc_weapons = ``;\n  let sc_features = items\n    .filter(i => i.system.origin && i.system.origin.name === origin && i.system.type === \"Weapon\")\n    .sort(sort_features);\n  sc_features.forEach(i => {\n    let sc_name = ``;\n    let sc_desc = ``;\n    let sc_entry = ``;\n    let sc_range = ``;\n    let sc_damage = ``;\n    let sc_accuracy = ``;\n    if (!i.type) {\n      return sc_weapons;\n    }\n    sc_weapons += `<table>`;\n    if (i.system.origin.name == \"EXOTIC\" && !i.system.origin.base) {\n      sc_name = '<tr><th><code class=\"horus--subtle\">UNKNOWN EXOTIC WEAPON</code></th></tr>';\n      sc_desc = \"<tr><td>???</td></tr>\";\n      sc_entry = sc_name + sc_desc;\n    } else {\n      sc_name = `<tr><th colspan=\"4\">${i.name}</th></tr>`;\n      sc_entry += sc_name;\n      sc_desc = `<tr>`;\n      sc_desc += `<td>+${i.system.attack_bonus[tier - 1]} ATTACK</td>`;\n      if (i.system.accuracy[tier - 1]) {\n        let acc = i.system.accuracy[tier - 1];\n        sc_accuracy = `${acc > 0 ? \"+\" : \"\"}${acc} ${acc > 0 ? \"ACCURACY\" : \"DIFFICULTY\"}`;\n      }\n      sc_desc += `<td>${sc_accuracy}</td>`;\n      if (i.system.range.length > 0) {\n        i.system.range.forEach(r => (sc_range += r.type + \" \" + r.val + \"&nbsp&nbsp&nbsp\"));\n      }\n      sc_desc += `<td>${sc_range}</td>`;\n      if (i.system.damage.length > 0) {\n        i.system.damage[tier - 1].forEach(d => (sc_damage += d.val + \" \" + d.type + \"&nbsp&nbsp&nbsp\"));\n      }\n      sc_desc += `<td>${sc_damage}</td>`;\n      if (i.system.tags.some(t => t.is_loading)) {\n        if (i.system.loaded) {\n          sc_desc += `<td>LOADED</td>`;\n        } else {\n          sc_desc += `<td>UNLOADED</td>`;\n        }\n      } else {\n        sc_desc += `<td></td>`;\n      }\n      if (i.system.uses.max > 0) {\n        sc_desc += `<td>USES: ${i.system.uses.value}/${i.system.uses.max}</td>`;\n      }\n      sc_desc += `<tr>`;\n      if (i.system.trigger) {\n        sc_desc += `<tr><td colspan=\"6\"><details><summary>Trigger</summary><p>${i.system.trigger}</p></details></td></tr>`;\n      }\n      if (i.system.on_hit) {\n        sc_desc += `<tr><td colspan=\"6\"><details><summary>On Hit</summary><p>${i.system.on_hit}</p></details></td></tr>`;\n      }\n      if (i.system.effect) {\n        sc_desc += `<tr><td colspan=\"6\">${i.system.effect}</td></tr>`;\n      }\n      if (i.system.tags.length > 0) {\n        sc_desc += `<tr><td colspan=\"6\">Tags: `;\n        sc_desc += i.system.tags.map(t => `${t.name.replace(\"{VAL}\", t.val)}`).join(\", \");\n        sc_desc += `</td></tr>`;\n      }\n      sc_entry += sc_desc;\n    }\n    sc_weapons += sc_entry;\n    sc_weapons += `</table>`;\n  });\n  return sc_weapons;\n}\n\n//construct_templates\nfunction construct_templates(items) {\n  let templatefind = findItemByType(items, \"npc_template\");\n  let sc_templates = ``;\n  let sc_temp = templatefind;\n  if (!sc_temp || sc_temp.length == 0) {\n    sc_templates += \"<p>NONE</p>\";\n  } else {\n    sc_temp.forEach(i => {\n      let sc_entry = `<p>${i.name}</p>`;\n      sc_templates += sc_entry;\n    });\n  }\n  return sc_templates;\n}\n\n// Find or create the Scans folder\nlet journalFolder = game.folders.getName(journalFolderName);\nif (!journalFolder && journalFolderName.length > 0) {\n  try {\n    journalFolder = await Folder.create({\n      name: journalFolderName,\n      type: \"JournalEntry\",\n    });\n  } catch (error) {\n    ui.notifications.error(\n      `${journalFolderName} does not exist and must be created manually by a user with permissions to do so.`\n    );\n    return;\n  }\n}\n\n// Create the journal for each targeted token\ntargets.forEach(async target => {\n  let actor = target.actor;\n  if (actorPermissionLevel !== null) {\n    const actorId = actor.system.parent._id;\n    const parentActor = game.actors.get(actorId);\n    parentActor.update({ ownership: { default: actorPermissionLevel } });\n  }\n  console.log(\"Scanning target:\", actor);\n  let items = actor.items;\n  let hase_table_html = `\n<p><img style=\"border: 3px dashed #000000; float: left; margin-right: 5px; margin-left: 5px;\" src=\"${\n    target.document.actor.img\n  }\" width=\"30%\" height=\"30%\" /></p>\n<div style=\"color: #000000; width: 65%; float: right; text-align: left;\">\n<table>\n  <tr>\n    <th>HULL</th><th>AGI</th><th>SYS</th><th>ENG</th>\n  </tr>\n  <tr>\n    <td>${actor.system.hull || 0}</td>\n    <td>${actor.system.agi || 0}</td>\n    <td>${actor.system.sys || 0}</td>\n    <td>${actor.system.eng || 0}</td>\n  </tr>\n</table> `;\n  let stat_table_html = `\n<table>\n  <tr>\n    <th>Armor</th><th>HP</th><th>Heat</th><th>Speed</th>\n  </tr>\n  <tr>\n    <td>${actor.system.armor}</td>\n    <td>${actor.system.hp.value}/${actor.system.hp.max}</td>\n    <td>${actor.system.heat.value || 0}/${actor.system.heat.max || 0}</td>\n    <td>${actor.system.speed}</td>\n  </tr>\n  <tr>\n    <th>Evasion</th><th>E-Def</th><th>Save</th><th>Sensors</th>\n  </tr>\n  <tr>\n    <td>${actor.system.evasion}</td>\n    <td>${actor.system.edef}</td>\n    <td>${actor.system.save}</td>\n    <td>${actor.system.sensor_range}</td>\n  </tr>\n  <tr>\n    <th>Size</th><th>Activ</th><th>Struct</th><th>Stress</th>\n  </tr>\n  <tr>\n    <td>${actor.system.size}</td>\n    <td>${actor.system.activations || 1}</td>\n    <td>${actor.system.structure.value || 0}/${actor.system.structure.max || 0}</td>\n    <td>${actor.system.stress.value || 0}/${actor.system.stress.max || 0}</td>\n  </tr>\n</table> `;\n  console.log(items);\n  let sc_class = !actor.system.class ? \"NONE\" : actor.system.class.name;\n  let sc_tier = actor.system.tier ? actor.system.tier : 0;\n  let sc_templates = construct_templates(items);\n  let sc_list = ``;\n  let sc_weapons = ``;\n  if (!items || items.length == 0) {\n    sc_list += \"<p>NONE</p>\";\n    sc_weapons += \"<p>NONE</p>\";\n  } else {\n    let sc_origins = [];\n\n    items.forEach(f => {\n      let origin = f.system.origin?.name;\n      if (origin && !sc_origins.includes(origin)) {\n        sc_origins.push(origin);\n      }\n    });\n\n    sc_origins.forEach(origin => {\n      sc_list += construct_features(items, origin);\n      sc_weapons += construct_weapons(items, origin, sc_tier);\n    });\n  }\n\n  if (outputToChat) {\n    ChatMessage.create({\n      user: game.user._id,\n      content: `<h2>Scan results: ${actor.name}</h2>\n        <h3>Class: ${sc_class}, Tier ${sc_tier}</h3>\n        ${hase_table_html}\n        ${stat_table_html}\n        <h3>Templates:</h3>\n        ${sc_templates}\n        <h3>Systems:</h3>\n        ${sc_list}`,\n    });\n  }\n\n  let scanContent =\n    `<h2>Scan results: ${actor.name}</h2>` +\n    `<h3>Class: ${sc_class}, Tier ${sc_tier}</h3>` +\n    hase_table_html +\n    stat_table_html +\n    `</div><div style=\"color: #000000; width: 100%; float: right; text-align: left;\"><h3>Templates:</h3>` +\n    sc_templates +\n    `<h3>Weapons:</h3>` +\n    sc_weapons +\n    `<h3>Systems:</h3>` +\n    sc_list +\n    `</div>`;\n\n  //This checks and updates the scan entry for the target(s) if a single scan entry exists in the specified folder for the target(s) along with the updateExisting flag.\n  //If either are false then this creates a new scan entry.\n\n  let scanEntry;\n\n  let matchingJournalEntries = journalFolder.contents.filter(e => e.name.includes(actor.name));\n\n  if (matchingJournalEntries.length == 1 && updateExisting === true) {\n    console.log(\"Updating an existing scan\");\n    const scanName = matchingJournalEntries[0].name;\n    scanEntry = game.journal.getName(scanName);\n    let scanPage = scanEntry.pages.getName(scanName);\n    await scanPage.update({\n      _id: matchingJournalEntries[0]._id,\n      text: {\n        content: scanContent,\n      },\n    });\n  } else {\n    console.log(\"Creating a new scan\");\n    let scanCount = zeroPad(\n      journalFolder.contents.filter(e => e.name.startsWith(nameTemplate)).length + startingNumber,\n      numberLength\n    );\n    const scanName = nameTemplate + scanCount + ` - ` + actor.name;\n    let scanPage = new JournalEntryPage({\n      name: scanName,\n      type: \"text\",\n      text: { content: scanContent },\n    });\n    scanEntry = await JournalEntry.create({\n      folder: journalFolder.id,\n      name: scanName,\n    });\n    scanEntry.createEmbeddedDocuments(\"JournalEntryPage\", [scanPage]);\n  }\n\n  scanEntry.update({ ownership: { default: permissionLevel } });\n  scanEntry.sheet.render(true);\n});"
    },
    "Stabilize Token": {
      "name": "Stabilize Token",
      "command": "if (canvas.tokens.controlled.length !== 1) {\n  ui.notifications.error(\"Select one and only one token\");\n  return;\n}\ncanvas.tokens.controlled[0].actor.beginStabilizeFlow();"
    },
    "Structure Token": {
      "name": "Structure Token",
      "command": "if (canvas.tokens.controlled.length !== 1) {\n    ui.notifications.error(\"Select one and only one token\");\n    return;\n}\ncanvas.tokens.controlled[0].actor.beginStructureFlow();"
    }
  }
}